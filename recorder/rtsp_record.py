import os
import time
import datetime
import subprocess
import signal
import sys
import logging
import boto3
from botocore.exceptions import BotoCoreError, NoCredentialsError

# üîß **–ù–∞—Å—Ç—Ä–æ–π–∫–∏**
CAM_NUMBER = os.getenv("CAM_NUMBER", "1")

RTSP_URL = f"rtsp://rtsp-to-web:554/id{CAM_NUMBER}/0"
BUFFER_DIR = f"/buffer/cam{CAM_NUMBER}"
CRASH_DIR = f"/crashed/cam{CAM_NUMBER}"
LOG_FILE = f"/var/log/recorder_cam{CAM_NUMBER}.log"
S3_BUCKET_NAME = os.getenv("S3_BUCKET_NAME")
S3_UPLOAD_PATH = os.getenv("S3_UPLOAD_PATH", f"crashes/cam{CAM_NUMBER}/")

DURATION = int(os.getenv("DURATION", 20))
MAX_BUFFER_SIZE = int(os.getenv("MAX_BUFFER_SIZE", 5))
CHECK_INTERVAL = 10

# üìÇ –°–æ–∑–¥–∞—ë–º –Ω—É–∂–Ω—ã–µ –ø–∞–ø–∫–∏
os.makedirs(BUFFER_DIR, exist_ok=True)
os.makedirs(CRASH_DIR, exist_ok=True)
os.makedirs("/var/log", exist_ok=True)

# üìú **–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ**
logging.basicConfig(
    level=logging.INFO,
    format=f"[%(asctime)s] [%(levelname)s] [CAM-{CAM_NUMBER}] %(message)s",
    handlers=[
        logging.FileHandler(LOG_FILE),
        logging.StreamHandler(sys.stdout)
    ],
    force=True
)

logging.info(f"üé• –ö–∞–º–µ—Ä–∞ {CAM_NUMBER} –∑–∞–ø—É—â–µ–Ω–∞ —Å RTSP: {RTSP_URL}")
logging.info(f"üì§ –ó–∞–ø–∏—Å—å –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –≤: {S3_UPLOAD_PATH}")

# üîç **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ AWS S3**
try:
    session = boto3.Session()
    s3 = session.client("s3")
    logging.info("‚úÖ AWS S3 –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ IAM Role")
except (BotoCoreError, NoCredentialsError) as e:
    logging.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AWS S3: {e}")
    s3 = None  # –û—Ç–∫–ª—é—á–∞–µ–º S3, –µ—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞

# üö¶ –§–ª–∞–≥ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
running = True
recording_active = True
buffer_files = []

# üîÑ **–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ç–æ–∫–∞**
def is_rtsp_available():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ RTSP-–ø–æ—Ç–æ–∫"""
    test_command = [
        "ffmpeg", "-rtsp_transport", "tcp", "-i", RTSP_URL,
        "-t", "1", "-c", "copy", "-f", "null", "-"
    ]
    result = subprocess.run(test_command, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    return result.returncode == 0

# üõ† **–§—É–Ω–∫—Ü–∏—è —Å–ª–∏—è–Ω–∏—è –≤–∏–¥–µ–æ—Ñ–∞–π–ª–æ–≤**
def merge_videos(files, output_file):
    """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤–∏–¥–µ–æ—Ñ–∞–π–ª—ã –≤ –æ–¥–∏–Ω –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π"""
    if len(files) == 1:
        os.rename(files[0], output_file)
        return

    file_list_path = os.path.join(CRASH_DIR, "file_list.txt")

    with open(file_list_path, "w") as file_list:
        for file in files:
            file_list.write(f"file '{file}'\n")

    merge_command = [
        "ffmpeg", "-f", "concat", "-safe", "0", "-i", file_list_path, 
        "-c", "copy", "-vsync", "vfr", output_file
    ]
    
    result = subprocess.run(merge_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

    if result.returncode == 0:
        logging.info(f"‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–æ: {output_file}")
        for file in files:
            os.remove(file)  # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ —Å–ª–∏—è–Ω–∏—è
    else:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤. –õ–æ–≥ FFmpeg: {result.stderr.decode()}")

# üõ† **–§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–æ–≤ –≤ S3**
def upload_crash_to_s3(file_path):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫—Ä–∞—à-—Ñ–∞–π–ª –≤ S3 –∏ —É–¥–∞–ª—è–µ—Ç –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    if not s3 or not S3_BUCKET_NAME:
        logging.warning("‚ö†Ô∏è S3 –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è S3_BUCKET_NAME –ø—É—Å—Ç–∞—è.")
        return

    if not os.path.exists(file_path):
        logging.error(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª {file_path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É.")
        return

    if os.path.getsize(file_path) == 0:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª {file_path} –ø—É—Å—Ç–æ–π. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É.")
        return

    s3_key = f"{S3_UPLOAD_PATH}/{os.path.basename(file_path)}"

    try:
        logging.info(f"üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º {file_path} –≤ S3: s3://{S3_BUCKET_NAME}/{s3_key}")
        s3.upload_file(file_path, S3_BUCKET_NAME, s3_key)
        logging.info(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ S3: s3://{S3_BUCKET_NAME}/{s3_key}")

        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        os.remove(file_path)
        logging.info(f"üóë –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª—ë–Ω –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏: {file_path}")

    except Exception as e:
        logging.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ S3: {e}")

# üîÑ **–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∑–∞–ø–∏—Å–∏**
while running:
    if not is_rtsp_available():
        if recording_active:
            logging.warning("‚ùå –ü–æ—Ç–æ–∫ –ø–æ—Ç–µ—Ä—è–Ω. –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∫—Ä–∞—à–∞...")

            # üî• –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ S3
            if buffer_files:
                timestamp = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
                merged_file = os.path.join(CRASH_DIR, f"crash_{timestamp}.mp4")
                merge_videos(buffer_files, merged_file)
                upload_crash_to_s3(merged_file)

                buffer_files.clear()

            logging.warning("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞...")

        recording_active = False
        time.sleep(CHECK_INTERVAL)
        continue

    if not recording_active:
        logging.info("‚úÖ –ü–æ—Ç–æ–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í–æ–∑–æ–±–Ω–æ–≤–ª—è—é –∑–∞–ø–∏—Å—å...")
        recording_active = True

    timestamp = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    temp_file = os.path.join(BUFFER_DIR, f"{timestamp}.mp4")

    command = [
        "ffmpeg", "-rtsp_transport", "tcp",
        "-i", RTSP_URL, "-t", str(DURATION),
        "-c", "copy", temp_file
    ]

    logging.info(f"üé• –ó–∞–ø–∏—Å—å –≤–∏–¥–µ–æ: {temp_file}")
    process = subprocess.run(command, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    if process.returncode != 0:
        logging.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏. –ñ–¥—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞...")
        continue

    buffer_files.append(temp_file)

    time.sleep(1)

logging.info("üõë –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å RTSP-–∑–∞–ø–∏—Å–∏.")