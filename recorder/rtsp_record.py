import os
import time
import datetime
import subprocess
import signal
import sys
import logging
import boto3  # type: ignore
from botocore.exceptions import BotoCoreError, NoCredentialsError

# üîß **–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è**
RTSP_URL = os.getenv("RTSP_URL", "rtsp://rtsp-to-web:554/id1/0")
BUFFER_DIR = "/buffer"
CRASH_DIR = "/crashed"
LOG_FILE = "/var/log/recorder.log"
S3_BUCKET_NAME = os.getenv("S3_BUCKET_NAME")  # –ò–º—è S3-–±–∞–∫–µ—Ç–∞
S3_UPLOAD_PATH = os.getenv("S3_UPLOAD_PATH", "crashes/cam1/")  # –ü—É—Ç—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫—Ä–∞—à-—Ñ–∞–π–ª–æ–≤ –≤ S3

DURATION = int(os.getenv("DURATION", 20))
MAX_BUFFER_SIZE = int(os.getenv("MAX_BUFFER_SIZE", 5))
CHECK_INTERVAL = 10

# üîπ –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
os.makedirs(BUFFER_DIR, exist_ok=True)
os.makedirs(CRASH_DIR, exist_ok=True)
os.makedirs("/var/log", exist_ok=True)

# üîç **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è**
logging.basicConfig(
    level=logging.INFO,
    format="[%(asctime)s] [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler(LOG_FILE),  # –õ–æ–≥–∏ –≤ —Ñ–∞–π–ª
        logging.StreamHandler(sys.stdout)  # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
    ],
    force=True  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
)

logging.info("üé• –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ.")

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ AWS S3 (–±–µ–∑ –∫–ª—é—á–µ–π - IAM Role)
try:
    session = boto3.Session()
    s3 = session.client("s3")
    logging.info("‚úÖ AWS S3 –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ IAM Role")
except (BotoCoreError, NoCredentialsError) as e:
    logging.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AWS S3: {e}")
    s3 = None  # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞, –æ—Ç–∫–ª—é—á–∞–µ–º S3

# –§–ª–∞–≥ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
running = True


# üîÑ **–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ç–æ–∫–∞**
def is_rtsp_available():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ RTSP-–ø–æ—Ç–æ–∫"""
    test_command = [
        "ffmpeg", "-rtsp_transport", "tcp", "-i", RTSP_URL,
        "-t", "1", "-c", "copy", "-f", "null", "-"
    ]
    result = subprocess.run(test_command, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    return result.returncode == 0


# üîÑ **–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è**
def cleanup_and_exit(signal_received, frame):
    """–§—É–Ω–∫—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã"""
    global running
    running = False
    logging.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏...")

    if buffer_files:
        timestamp = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        merged_file = os.path.join(CRASH_DIR, f"crash_{timestamp}.mp4")
        merge_videos(buffer_files, merged_file)
        logging.info(f"üìÅ –°–æ—Ö—Ä–∞–Ω–µ–Ω –∞–≤–∞—Ä–∏–π–Ω—ã–π —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º: {merged_file}")
        upload_crash_to_s3(merged_file)

    for file in buffer_files:
        os.remove(file)

    sys.exit(0)


# üõ† **–§—É–Ω–∫—Ü–∏—è —Å–∫–ª–µ–π–∫–∏ –≤–∏–¥–µ–æ**
def merge_videos(files, output_file):
    """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤–∏–¥–µ–æ—Ñ–∞–π–ª—ã –≤ –æ–¥–∏–Ω"""
    file_list_path = os.path.join(CRASH_DIR, "file_list.txt")

    with open(file_list_path, "w") as file_list:
        for file in files:
            file_list.write(f"file '{file}'\n")

    merge_command = ["ffmpeg", "-f", "concat", "-safe", "0", "-i", file_list_path, "-c", "copy", "-vsync", "vfr", output_file]
    subprocess.run(merge_command, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)


# üõ† **–§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫—Ä–∞—à-—Ñ–∞–π–ª–æ–≤ –≤ S3**
def upload_crash_to_s3(file_path):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫—Ä–∞—à-—Ñ–∞–π–ª –≤ S3"""
    if not s3 or not S3_BUCKET_NAME:
        logging.warning("‚ö†Ô∏è S3 –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –§–∞–π–ª –Ω–µ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω.")
        return

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º S3_UPLOAD_PATH
        s3_key = f"{S3_UPLOAD_PATH}{os.path.basename(file_path)}"
        s3.upload_file(file_path, S3_BUCKET_NAME, s3_key)
        logging.info(f"üì§ –ö—Ä–∞—à-—Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ S3: s3://{S3_BUCKET_NAME}/{s3_key}")

        # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —É–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
        os.remove(file_path)
    except Exception as e:
        logging.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ S3: {e}")


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Ctrl+C
signal.signal(signal.SIGINT, cleanup_and_exit)

# üîÑ **–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∑–∞–ø–∏—Å–∏**
buffer_files = []
recording_active = True

while running:
    if not is_rtsp_available():
        if recording_active:
            logging.warning("‚ùå –ü–æ—Ç–æ–∫ –ø–æ—Ç–µ—Ä—è–Ω. –ñ–¥—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...")
            if buffer_files:
                timestamp = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
                merged_file = os.path.join(CRASH_DIR, f"crash_{timestamp}.mp4")
                merge_videos(buffer_files, merged_file)
                logging.info(f"üî• –°–æ—Ö—Ä–∞–Ω–µ–Ω –∞–≤–∞—Ä–∏–π–Ω—ã–π —Ñ–∞–π–ª: {merged_file}")
                upload_crash_to_s3(merged_file)

                for file in buffer_files:
                    os.remove(file)

                buffer_files.clear()

        recording_active = False
        time.sleep(CHECK_INTERVAL)
        continue

    if not recording_active:
        logging.info("‚úÖ –ü–æ—Ç–æ–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í–æ–∑–æ–±–Ω–æ–≤–ª—è—é –∑–∞–ø–∏—Å—å...")
        recording_active = True

    timestamp = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    temp_file = os.path.join(BUFFER_DIR, f"{timestamp}.mp4")

    command = [
        "ffmpeg", "-rtsp_transport", "tcp",
        "-i", RTSP_URL, "-t", str(DURATION),
        "-c", "copy", temp_file
    ]

    logging.info(f"üé• –ó–∞–ø–∏—Å—å –≤–∏–¥–µ–æ: {temp_file}")

    process = subprocess.run(command, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    if process.returncode != 0:
        logging.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏. –ñ–¥—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞...")
        continue

    buffer_files.append(temp_file)

    if len(buffer_files) > MAX_BUFFER_SIZE:
        old_file = buffer_files.pop(0)
        os.remove(old_file)
        logging.info(f"üóë –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –∏–∑ –∫–µ—à–∞: {old_file}")

    # üî• –ë—É—Ñ–µ—Ä–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ S3!

    time.sleep(1)